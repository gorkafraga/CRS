With the FAIR principles in mind, we consider the ORD needs of the reference project and potential solutions

# Open research data

*Data* \| *Metadata* \| *Docs* \| *Code*\
- `Data`: research output that will be analyzed\
- `Metadata`: numeric and text descriptors associated to the data. Essential for analysis\
- `Docs`: text and figures essential to understand the data and metadata. E.g., File naming convention\
- `Code`: scripts for data preprocessing, analysis and output inspection\

## Data info

### Data types and formats

```{r justTable, echo=FALSE, results='asis', fig.width=1500}
library(DT)
library(dplyr)

# read table -------------------------------------------------
metadata <- readxl::read_xlsx('Metadata_dataManagement.xlsx') 

# Dynamic table -------------------------------------------------

metadata %>% 
 datatable(
    filter = "top",
    rownames=FALSE, width="100%",
    class='compact cell-border hover', # CSS classes https://datatables.net/manual/styling/classes
    extensions=c('Buttons','Select','SearchPanes'),
    selection = 'none',
    options=list(dom='Bfrtip', buttons=c('copy','csv','excel','pdf')),
    escape=FALSE
  ) 

```

### File types

*raw* \| *reconstructed* \| *exported*\
- `raw`: source data, directly obtained from the measurement instrument\
- `reconstructed`: when raw data requires some minimum preprocessing (reconstruction) to be usableÂ  - `exported`: format has been changed for shareability

# Metadata

Essential metadata will be stored at different levels

-   `Filenames`: filename parts and metadata stored depend on data format and type\
-   `Folder structure`: measurements from different labs (e.g Japan, France) are stored in separate folders\
-   `Table`: a key table will explain and extend description of files in the main folders. They can be made interactive\
-   `Text logs`: when applicable, text or markdown files (e.g., README.md) at each folder level will inform of content, report errors, etc

# Docs

Documentation

# Code

2.  Sharing lighter data
3.  Managing and storing code with version control
4.  Managing and storing documentation with version control
5.  Hosting a central project html with links and utilities like the interactive tables
