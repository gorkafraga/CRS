---
title: "Exploring picture-data"
author: "GFragaGonzalez (CRS-UZH)"
date: "`r Sys.Date()`"
description: "Testing a simple data viewer to explore image (thumbnails) with minimal coding requirements "
editor: visual
format:  
  html:
    theme: default
    title-block-banner: true
    page-layout: full
    code-fold: true
    code-tools: true
    standalone: true
    embedded-resources: true
    toc: true
    #toc-float: true
    #collapsed: true
    #number-sections: false
    #toc-depth: 3
css: styles.css
---

```{r setup, include=FALSE}
    knitr::opts_chunk$set(message=FALSE,warning=FALSE, cache=FALSE)
```

<!-- ```{=html} -->

<!-- <style> -->

<!--   /* Add CSS for the hover effect */ -->

<!--   img:hover { -->

<!--     height: 100%; /* Change this value to the desired enlarged height */ -->

<!--     width: 100%; /* Change this value to the desired enlarged width */ -->

<!--   } -->

<!-- </style> -->

<!-- ``` -->

```{=html}
<style>
  /* Add CSS for the hover effect */
  img:hover {
    /* overflow: hidden;*/
    width:  120px;  /* Set the desired width for the container */
    height: 120px;  /* Set the desired height for the container */
  }
</style>
```
# Info

::: panel-tabset
## Metadata

First we need a csv or excel table with metadata that is also reflected in the filename parts. The metadata table has the name of the picture files. Here we add some HTML formatting to the cells containing the filename (e.g,. so that they expand when hovering the mouse). The parameter `escape = FALSE` is required in `data table` (r package to render the table) to render the images.

```{r, echo=TRUE, results='asis'}
library(DT)
library(dplyr)
library(here )
#-------------------------------------------------
# Read filenames from directory
metadata <- read.csv(file.path(here::here(),'Metadata_filenames.csv'))
folderWithPics <- paste0('Spring_jpg',.Platform$file.sep)
# add html component to column with file names
sourceAdress <- paste0(folderWithPics, metadata$file)
sourceAddress <- file.path(here::here(),'Spring_jpg', metadata$file)
metadata$pic <- paste0('<a href =\'',sourceAdress,' \'>',
                       '<img src=\'', sourceAdress, '\' height=\'70\' witdth = \'70\'',
                       'alt=\'Image\'','/> </a>')
  
#metadata %>% relocate(file, .after = last_col())
 

 
```

## Filenames

For this early test the following scheme was inferred from the filenames of files starting with "JP\*". Metadata table was created accordingly. Future versions should specify the remaining files or create a separate table for the other type of files available

#### Scheme

`<specID>_<status>_<scanID><(desc)>_<rec>`

#### Labels

`specID`: *str + num* specimen ID (JP01)

`status`: *str* specimen status (dead \| invivo)

`scanID`: *num + str* scan number (1scan or scan1)

`desc`: OPTIONAL *str + num* additional description of number of scans, anatomy, state,version,etc

`seq`: *num* sequence number (053)

`rec`: *str + num* recording identifier (rec00182)

#### Legend:

`<field>` required field

`<(field)>` Optional field
:::

# Picture viewer

::: panel-tabset
## With Filter button

Here you can filter each column in the table filter boxes or click `'FILTER ROWS'` button to see panes with filters.The `filter panes` display as well how many cells are there (but panes are not updated when filters are active)

> NOTE: The filter panes are also not 'updated' if we have some filter in the column boxes in the table it self. This can be a bit confusing...

```{r PanelWithFilter, echo=TRUE, results='asis'}
# Dynamic table -------------------------------------------------

datatable(
  metadata, filter = "top",
  rownames=FALSE, width="100%", 
  class='compact cell-border hover', # See CSS classes https://datatables.net/manual/styling/classes
  extensions=c('Buttons','Select','SearchPanes','Scroller'),
  #selection = 'none',
  selection = 1,
  escape = FALSE,
  options = list(
    pageLength = 20,
    dom = 'Btip',
    buttons=c('searchPanes','copy','csv','excel','pdf'),
    language = list(searchPanes = list(collapse = "FILTER ROWS")),
    #scroller = TRUE, #If this is TRUE I can't disabled the horiz scroll
    #scrollY = 1000,
    scrollX = FALSE,
    scrollCollapse =  FALSE, # this fixes display issues with filter pane depending on selection 
    #paging = FALSE, 
    columnDefs = list(
      list(searchPanes = list(show = FALSE), targets = 5)  #'target' will change how many panes
    )
  ) 
)      
      

  
```

## With open Filter Panes

Filter boxes in table and also filter panes above

```{r filterPanes, echo=TRUE, results='asis'}
# Dynamic table -------------------------------------------------

 datatable(
  metadata, filter = "top",
  rownames=FALSE, width="100%", 
  class='compact cell-border hover', # CSS classes https://datatables.net/manual/styling/classes
  extensions=c('Buttons','Select','SearchPanes'),
  #selection = 'none',
  selection = 1,
  escape = FALSE,
  options = list(dom = 'PBfrtip', buttons=c('copy','csv','excel','pdf'),
                 columnDefs = list(list(
                   searchPanes = list(show = TRUE), 
                   targets = 5
                 ))),
)

```

## Just the table

Just the table with filter boxes

```{r justTable, echo=TRUE, results='asis', fig.width=1500}
# Dynamic table -------------------------------------------------
library(DT)
library(dplyr)
# Render table (ref https://www.rdocumentation.org/packages/DT/versions/0.28/topics/datatable)

metadata %>% 
 datatable(
    filter = "top",
    rownames=FALSE, width="100%",
    class='compact cell-border hover', # CSS classes https://datatables.net/manual/styling/classes
    extensions=c('Buttons','Select','SearchPanes'),
    selection = 'none',
    options=list(dom='Bfrtip', buttons=c('copy','csv','excel','pdf')),
    escape=FALSE
  )  %>%
 DT::formatStyle(columns = colnames('file'), fontSize = '10%')

```
:::
