# Load required packages
library(shiny)
library(DT)
library(readr)

# Set URL for default file
fileinput <- "https://raw.githubusercontent.com/gorkafraga/CRS/main/utilities/Shiny_AFFORD_image_explorer/www/Metadata_filenames_html.csv"

# USER INTERFACE 
# ===============================================================

ui <- fluidPage(
  # Title 
  titlePanel("Exploring images from metadata table"), 
  # Panels
  sidebarLayout(
    # Button to update the table and upload file
    sidebarPanel(
      # 
      fileInput("uploadFile", "Upload CSV File"),
      actionButton("refreshButton", "Refresh table"),
      
      # Dropdown menu for filtering specID
      selectizeInput("filterSpecID", "Filter specID:", choices = NULL, multiple = TRUE, options = list(placeholder = 'Select specID...')),
      
      # Dropdown menu for filtering scanID
      selectizeInput("filterScanID", "Filter scanID:", choices = NULL, multiple = TRUE, options = list(placeholder = 'Select scanID...')),
      
      # Checkbox menu for filtering status
      checkboxGroupInput("filterStatus", "Filter status:", choices = NULL)
    ), 
    # Panel displaying the table
    mainPanel(
      DTOutput("data_table", width = "100%")
    )
  )
)

# SERVER 
# ===============================================================

# Define server logic
server <- function(input, output, session) {
  
  # Create a 'reactiveValues' object to hold the data
  data <- reactiveValues(table_data = NULL)
  
  # Function to read data from CSV file
  read_data <- function(file = NULL) {
    tryCatch({
      if (!is.null(file)) {
        data$table_data <- read_csv(file$datapath, show_col_types = FALSE)
      } else {
        data$table_data <- read_csv(fileinput, show_col_types = FALSE)
      }
    }, error = function(e) {
      cat("Error reading CSV file:", conditionMessage(e), "\n")
    })
  } 
  
  # Initial data read
  read_data()
  
  
  # Observe user inputs ---------------------------------------------------
  # Observe the file upload
  observeEvent(input$uploadFile, {
    read_data(input$uploadFile)
  })
  
  # Observe the refresh button click
  observeEvent(input$refreshButton, {
    read_data()
  })
  
  # Update the choices for filterSpecID dropdown
  observe({
    if (!is.null(data$table_data)) {
      updateSelectizeInput(session, "filterSpecID", choices = unique(data$table_data$specID), selected = input$filterSpecID)
      updateCheckboxGroupInput(session, "filterStatus", choices = unique(data$table_data$status), selected = input$filterStatus)
    }
  })
  
  # Update the choices for filterScanID dropdown
  observe({
    if (!is.null(data$table_data)) {
      updateSelectizeInput(session, "filterScanID", choices = unique(data$table_data$scanID), selected = input$filterScanID)
      updateCheckboxGroupInput(session, "filterStatus", choices = unique(data$table_data$status), selected = input$filterStatus)
    }
  })
  
  # Generate Output --------------------------------------------
  
  output$data_table <- DT::renderDataTable({
    filtered_data <- data$table_data
    
    # Filter according to inputs 
    if (!is.null(input$filterSpecID) && length(input$filterSpecID) > 0) {
      filtered_data <- filtered_data[filtered_data$specID %in% input$filterSpecID, ]
    }
    if (!is.null(input$filterScanID) && length(input$filterScanID) > 0) {
      filtered_data <- filtered_data[filtered_data$scanID %in% input$filterScanID, ]
    }
    if (!is.null(input$filterStatus) && length(input$filterStatus) > 0) {
      filtered_data <- filtered_data[filtered_data$status %in% input$filterStatus, ]
    }
    
    # render the table
    datatable(
      filtered_data,
      escape = FALSE,
      filter = "top",
      rownames = FALSE, 
      width = "100%",
      extensions = c('Buttons','Responsive','KeyTable'),
      selection = 'none',
      options=list(
        keys=TRUE,
        dom='Brftip', 
        buttons=c('copy','csv','excel','pdf'),
        pageLength=20
      )
    )
  })
}

# Run the Shiny app
shinyApp(ui, server)
